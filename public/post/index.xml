<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Aravind&#39;s Blog | R | Economics | Finance</title>
    <link>/post/</link>
    <description>Recent content in Posts on Aravind&#39;s Blog | R | Economics | Finance</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data Wrangling with dbplyr</title>
      <link>/2017/12/25/data-wrangling-with-dbplyr/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/25/data-wrangling-with-dbplyr/</guid>
      <description>IntroductionThis is the third post in the series R &amp;amp; Databases. You can find the links to the other two posts of this series below:
Quick Guide: R &amp;amp; SQLiteIn this post, we will learn to query data from a database using dplyr.
Libraries, Code &amp;amp; DataWe will use the following libraries in this post:
DBIRSQLitedbplyrdplyrAll the data sets used in this post can be found here and code can be downloaded from here.</description>
    </item>
    
    <item>
      <title>Data Wrangling with dplyr - Part 1</title>
      <link>/2017/12/25/data-wrangling-with-dplyr-part-1/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/25/data-wrangling-with-dplyr-part-1/</guid>
      <description>IntroductionAccording to a survey by CrowdFlower, data scientists spend most of theirtime cleaning and manipulating data rather than mining or modeling them forinsights. As such, it becomes important to have tools that make datamanipulation faster and easier. In today’s post, we introduce you todplyr, a grammar of data manipulation.
Libraries, Code &amp;amp; DataWe will use the following libraries:
dplyrand readrThe data sets can be downloaded from hereand the codes from here.</description>
    </item>
    
    <item>
      <title>Data Wrangling with dplyr - Part 2</title>
      <link>/2017/12/25/data-wrangling-with-dplyr-part-2/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/25/data-wrangling-with-dplyr-part-2/</guid>
      <description>IntroductionIn the previous post,we learnt about dplyr verbs and used them to compute average order value for anonline retail company data. In this post, we will learn to combine tables usingdifferent *_join functions provided in dplyr.
Libraries, Code &amp;amp; DataWe will use the following packages:
dplyrreadrThe data sets can be downloaded from hereand the codes from here.
library(dplyr)library(readr)options(tibble.</description>
    </item>
    
    <item>
      <title>Data Wrangling with dplyr - Part 3</title>
      <link>/2017/12/25/data-wrangling-with-dplyr-part-3/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/25/data-wrangling-with-dplyr-part-3/</guid>
      <description>IntroductionIn the previous post,we learnt to combine tables using dplyr. In this post, we will explore a set ofhelper functions in order to:
extract unique rowsrename columnssample dataextract columnsslice rowsarrange rowscompare tablesextract/mutate data using predicate functionscount observations for different levels of a variableLibraries, Code &amp;amp; DataWe will use the following packages:
dplyrreadrThe data sets can be downloaded from hereand the codes from here.</description>
    </item>
    
    <item>
      <title>Hacking strings with stringr</title>
      <link>/2017/12/25/hacking-strings-with-stringr/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/25/hacking-strings-with-stringr/</guid>
      <description>IntroductionIn this post, we will learn to work with string data in R using stringr. As we did in the other posts, we will use a case study to explore the various features of the stringr package. Let us begin by installing and loading stringr and a set of other pacakges we will be using.
Libraries, Code &amp;amp; DataWe will use stringr, dplyr, magrittr, tibble, purrr and readr packages.</description>
    </item>
    
    <item>
      <title>Importing Data into R - Part 2</title>
      <link>/2017/12/25/importing-data-into-r-part-2/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/25/importing-data-into-r-part-2/</guid>
      <description>IntroductionThis is the second post in the series Importing Data into R. In the previous post, we explored reading data from flat/delimited files. In this post, we will:
list sheets in an excel fileread data from an excel sheetread specific cells from an excel sheetread specific rowsread specific columnsread data from- SAS- SPSS- STATALibraries, Data &amp;amp; CodeWe will use the readxl package.</description>
    </item>
    
    <item>
      <title>Importing Data into R - Part 3</title>
      <link>/2017/12/25/importing-data-into-r-part-3/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/25/importing-data-into-r-part-3/</guid>
      <description>IntroductionThis is the third post in the series Importing Data into R. You can find the link to the previous posts below:
Importing Data into R - Part 1Importing Data into R - Part 2In the previous post, we explored reading data from excel spreadsheets and files from other statistical softwares such as SAS, SPSS and STATA. In this post, we will learn to read data from:</description>
    </item>
    
    <item>
      <title>Introduction to tibbles</title>
      <link>/2017/12/25/introduction-to-tibbles/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/25/introduction-to-tibbles/</guid>
      <description>IntroductionA tibble, or tbl_df, is a modern reimagining of the data.frame, keeping what time has proven to be effective, and throwing out what is not. Tibbles are data.frames that are lazy and surly: they do less (i.e. they don’t change variable names or types, and don’t do partial matching) and complain more (e.g. when a variable does not exist). This forces you to confront problems earlier, typically leading to cleaner, more expressive code.</description>
    </item>
    
    <item>
      <title>Quick Guide: R &amp; SQLite</title>
      <link>/2017/12/25/quick-guide-r-sqlite/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/25/quick-guide-r-sqlite/</guid>
      <description>IntroductionThis is the first post in the series R &amp;amp; Databases. You can find the links to the other two posts of this series below:
Data Wrangling with dbplyrSQL for Data Science - Part 1SQL for Data Science - Part 2In this post, we will learn to:
connect to a SQLite database from Rdisplay database informationlist tables in the databasequery dataread entire tableread few rowsread data in batchescreate table in databaseoverwrite table in databaseappend data to table in databaseremove table from databasegenerate SQL queryclose database connectionLibraries, Code &amp;amp; DataWe will use the following libraries in this post:</description>
    </item>
    
    <item>
      <title>Readable Code with Pipes</title>
      <link>/2017/12/25/readable-code-with-pipes/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/25/readable-code-with-pipes/</guid>
      <description>IntroductionR code contain a lot of parentheses in case of a sequence of multiple operations. When you are dealing withcomplex code, it results in nested function calls which are hard to read and maintain. The magrittr package by Stefan Milton Bache provides pipes enabling us to write R code that is readable.
Pipes allow us to clearly express a sequence of multiple operations by:
structuring operations from left to rightavoidingnested function callsintermediate stepsoverwriting of original dataminimizing creation of local variablesPipesIf you are using tidyverse, magrittr will be automatically loaded.</description>
    </item>
    
    <item>
      <title>SQL for Data Science - Part 1</title>
      <link>/2017/12/25/sql-for-data-science-part-1/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/25/sql-for-data-science-part-1/</guid>
      <description>IntroductionThis is the third post in the series R &amp;amp; Databases. You can find the links to the other two posts of this series below:
Quick Guide: R &amp;amp; SQLiteData Wrangling with dbplyrSQL for Data Science - Part 2In this post, we will learn to:
Libraries, Code &amp;amp; DataWe will use the following libraries in this post:
DBIRSQLitedbplyrAll the data sets used in this post can be found here and code can be downloaded from here.</description>
    </item>
    
    <item>
      <title>SQL for Data Science - Part 2</title>
      <link>/2017/12/25/sql-for-data-science-part-2/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/25/sql-for-data-science-part-2/</guid>
      <description>IntroductionThis is the fourth post in the series R &amp;amp; Databases. You can find the links to the other two posts of this series below:
Quick Guide: R &amp;amp; SQLiteData Wrangling with dbplyrSQL for Data Science - Part 1In this post, we will learn to:
Libraries, Code &amp;amp; DataWe will use the following libraries in this post:
DBIRSQLitedbplyrAll the data sets used in this post can be found here and code can be downloaded from here.</description>
    </item>
    
    <item>
      <title>Working with Categorical Data using forcats</title>
      <link>/2017/12/25/working-with-categorical-data-using-forcats/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/25/working-with-categorical-data-using-forcats/</guid>
      <description>IntroductionIn this post, we will learn to work with categorical/qualitative data in R using forcats. Let us begin by installing and loading forcats and a set of other pacakges we will be using.
Libraries &amp;amp; CodeWe will use the following packages:
forcatsdplyrmagrittrggplot2tibbepurrrand readrThe codes from here.
library(forcats)library(tibble)library(magrittr)library(purrr)library(dplyr)library(ggplot2)library(readr)Case StudyWe will use a case study to explore the various features of the forcats package.</description>
    </item>
    
    <item>
      <title>Working with Dates in R </title>
      <link>/2017/12/25/working-with-dates-in-r/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/25/working-with-dates-in-r/</guid>
      <description>IntroductionIn this post, we will learn to work with date/time data in R using lubridate, an R package that makes it easy to work with dates and time.Let us begin by installing and loading the pacakge.
Libraries, Code &amp;amp; DataWe will use the following packages:
lubridatedplyrmagrittrreadrThe data sets can be downloaded from here and the codes from here.
library(lubridate)library(dplyr)library(magrittr)library(readr)Quic IntroOriginLet us look at the origin for the numbering system used for date and timecalculations in R.</description>
    </item>
    
    <item>
      <title>Importing Data into R - Part 1</title>
      <link>/2017/12/24/a-complete-guide-to-importing-data-into-r-part-1/</link>
      <pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/24/a-complete-guide-to-importing-data-into-r-part-1/</guid>
      <description>IntroductionThis is the first post in the series Importing Data into R. Before we get started, let me talk a bit about what we will learn in this series. I am planning to write 3 posts in which we will explore how to read data from:
flat/delimited files (.csv, .txt, .tsv)excel spreadsheets (.xls, .xlsx)statistical softwaresJSON/XMLThere are other ways to get data into R such as databases, APIs etc.</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Combining Plots</title>
      <link>/2016/12/17/data-visualization-with-r-combining-plots/</link>
      <pubDate>Sat, 17 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/12/17/data-visualization-with-r-combining-plots/</guid>
      <description>IntroductionThis is the tenth post in the series Data Visualization With R. In the previous post, we learnt how to add text annotations to plots. In this post, we will learn how to combine multiple plots. Often, it is useful to have multiple plots in the same frame as it allows us to get a comprehensive view of a particular variable or compare among different variables. The Graphics package offers two methods to combine multiple plots.</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Text Annotations</title>
      <link>/2016/12/08/data-visualization-with-r-text-annotations/</link>
      <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/12/08/data-visualization-with-r-text-annotations/</guid>
      <description>IntroductionThis is the ninth post in the series Data Visualization With R. In the previous post, we learnt how to add legend to a plot. In this post, we will learn to add text annotations. There are occassions when you want to display additional information in a plot. This is usually achieved by adding text either inside the plot or on the margins. For example, you might want to label a line/bar or add formulas to better communicate what is shown in the plot.</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Legends</title>
      <link>/2016/11/25/data-visualization-with-r-legends/</link>
      <pubDate>Fri, 25 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/25/data-visualization-with-r-legends/</guid>
      <description>IntroductionThis is the eighth post in the series Data Visualisation With R. In the previous post, we learnt to build histograms. In this post, we will learn how to:
position the legend within the plotmodify the layout using ncol and horiz argumentsadd title using the title. set of argumentsmodify the appearance and position of the legend boxmodify the appearance of the text in the legend boxLegends are used to convey information about the data being represented by a plot.</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Histogram</title>
      <link>/2016/11/06/data-visualization-with-r-histogram/</link>
      <pubDate>Sun, 06 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/06/data-visualization-with-r-histogram/</guid>
      <description>IntroductionThis is the seventh post in the series Data Visualization With R. In the previous post, we learnt about box and whisker plots. In this post, we will learn to:
create a bare bones histogramspecify the number of bins/intervalsrepresent frequency density on the Y axisadd colors to the bars and the borderadd labels to the barsA histogram is a plot that can be used to examine the shape and spread of continuous data.</description>
    </item>
    
    <item>
      <title>Data Visualization with R - Box Plots</title>
      <link>/2016/10/21/data-visualization-with-r-box-plots/</link>
      <pubDate>Fri, 21 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/10/21/data-visualization-with-r-box-plots/</guid>
      <description>IntroductionThis is the sixth post in the series Data Visualization With R. In the previous post, we learnt how to build bar plots. In this post, we will learn to
create univariate/multivariate box plotsinterpret box plotscreate horizontal box plotsdetect outliersmodify box coloruse formula to compare distributions of different variablesuse notches to compare medians
Libraries, Code &amp;amp; DataAll the data sets used in this post can be found here and code can be downloaded from here.</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Bar Plots</title>
      <link>/2016/10/05/data-visualization-with-r-bar-plots/</link>
      <pubDate>Wed, 05 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/10/05/data-visualization-with-r-bar-plots/</guid>
      <description>IntroductionThis is the fifth post in the series Data Visualization With R. In the previous post we learnt how to build line graphs. In this post, we will visualize categorical data using univariate and bivariate bar plots.
createsimple bar plotstacked bar plotgrouped bar plotmodify bardirectioncolorline colorwidthlabelsmodify axis rangeremove axes from the plotspecify the line type of the X axesoffset the Y axesmodify legend</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Line Graphs</title>
      <link>/2016/09/23/data-visualization-with-r-line-graphs/</link>
      <pubDate>Fri, 23 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/09/23/data-visualization-with-r-line-graphs/</guid>
      <description>IntroductionThis is the fourth post in the series Data Visualization With R. In the previous post, we learnt how to build scatter plots. In this post, we will build line graphs. To be more specific we will learn to
create line plotsadd color to linesmodify line type/stylemodify line widthadd points to the linesmodify axis rangeadd additional lines to the plot</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Scatter Plots</title>
      <link>/2016/09/07/data-visualization-with-r-scatter-plots/</link>
      <pubDate>Wed, 07 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/09/07/data-visualization-with-r-scatter-plots/</guid>
      <description>IntroductionThis is the third post in the series Data Visualization With R. In the previous post, we learned how to add title, subtitle and axis labels. We also learned how to modify the range of the axis. In this post, we will learn how to create scatter plots. If you remember, we had created a scatter plot in this post, using the plot() function. We will continue with the same plot and learn how to enhance a scatter plot by</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Title and Axis Labels</title>
      <link>/2016/08/22/data-visualization-with-r-title-and-axis-labels/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/08/22/data-visualization-with-r-title-and-axis-labels/</guid>
      <description>IntroductionThis is the second post of the series Data Visualization With R. In the previous post, we explored the plot() function and observed the different types of plots it generated. In this post, we will learn how to add:
TitleSubtitleAxis Labelsto a plot and how to modify:
Axis rangeIn the previous post, we created plots which did not have any title or labels.</description>
    </item>
    
    <item>
      <title>Data Visualization With R - Introduction</title>
      <link>/2016/08/05/data-visualization-with-r-introduction/</link>
      <pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/08/05/data-visualization-with-r-introduction/</guid>
      <description>IntroductionThis is the first post of the series Data Visualization With R. The objective of the series is to provide a gentle introduction to working with base graphics in R. We will come up with a similar series using ggplot2 shortly.
what is data visualizationwhy visualize dataunderstand R graphics systemgraphicsggplot2latticebuild some simple plots
Libraries, Code &amp;amp; DataAll the data sets used in this post can be found here and code can be downloaded from here.</description>
    </item>
    
  </channel>
</rss>